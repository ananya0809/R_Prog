ggplot(dataset, aes(x = factor(demo_race), y = term_gpa, fill = factor(demo_race))) +
geom_boxplot() +
labs(title = "BoxPlot of Term GPA by Race",
x = "Race (0 = Underrepresented, 1 = Non-Underrepresented, 2 = Other)",
y = "Term GPA") +
scale_fill_discrete(name = "Race")
ggplot(dataset , aes(x = term_gpa)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black") +
facet_wrap(~demo_race, scale = "free") +
theme_minimal() +
labs(title = "Distribution of Term GPA as per Race", x = "Term GPA", y = "Count")
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
facet_wrap(~demo_race, scale = "free_x") +
labs(title = "TotalSleepTime vs Term GPA with Race",
x = "Total Sleep Time",
y = "Term GPA")
dataset$gpa_range <- cut(dataset$term_gpa, breaks = c(-Inf, 2, 3, 4), labels = c("<2", "2-3", "3-4"))
ggplot(dataset, aes(x = Zterm_units_ZofZ, y = TotalSleepTime)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
facet_wrap(~gpa_range, scale = "free_x") +
labs(title = "Standardized Workload vs Total Sleep Time",
x = "Standardized Workload (Zterm_units_ZofZ)",
y = "Total Sleep Time")
set.seed(101)
ggplot(dataset, aes(x = Zterm_units_ZofZ, y = term_gpa )) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter plot of Work Load vs Term GPA")
set.seed(101)
# Boxplot of term_gpa by Gender
dataset$demo_gender[is.na(dataset$demo_gender)] <- 2 # as observed earlier, there are 3 NA value so we update it for inclusivity
ggplot(dataset, aes(x = factor(demo_gender), y = term_gpa, fill = factor(demo_gender))) +
geom_boxplot() +
labs(title = "BoxPlot of Term GPA by Gender",
x = "Gender (0 = Male, 1 = Female, 2 = Other)",
y = "Term GPA") +
scale_fill_discrete(name = "Gender")
ggplot(dataset , aes(x = term_gpa)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black") +
facet_wrap(~demo_gender, scale = "free") +
theme_minimal() +
labs(title = "Distribution of Term GPA as per Gender", x = "Term GPA", y = "Count")
set.seed(101)
# Faceted scatter plot of term_gpa vs SleepHours by Gender
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_point() +
facet_wrap(~demo_gender, ,scales='free') +
ggtitle("Faceted Scatter Plot of Term GPA vs Sleep Hours by Gender")
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_boxplot() +
facet_wrap(~demo_firstgen, scale = "free_x") +
labs(title = "Term GPA by First-Generation Status", x = "First-Generation Status", y = "Term GPA")
ggplot(dataset, aes(x = midpoint_sleep, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
facet_wrap(~study, scale = "free") +
labs(title = "Midpoint of Sleep vs Term GPA as per Study",
x = "Midpoint of Sleep in minutes after 11 pm ",
y = "Term GPA")
ggplot(dataset, aes(x = daytime_sleep, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~demo_gender, scale = "free_x") +
labs(title = "Daytime Sleep vs Term GPA", x = "Daytime Sleep (minutes)", y = "Term GPA")
suppressMessages(library(ggplot2))
suppressMessages(library(tidyverse))
suppressMessages(library(GGally))   # For pairwise plots
suppressMessages(library(corrplot)) # For correlation plot
suppressMessages(library(reshape2))
dataset <- read.csv("cmu-sleep.csv")
head(dataset)
summary(dataset)
str(dataset)
dim(dataset)
colSums(is.na(dataset))
set.seed(101)
num_vars <- dataset %>% select_if(is.numeric)
corr_matrix <- cor(num_vars, use = "complete.obs")
melt_corr <- melt(corr_matrix)
ggplot(melt_corr, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab") +
theme_minimal() +
ggtitle("Heatmap of Correlation Matrix") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.title.x = element_blank(),
axis.title.y = element_blank()) +
coord_fixed()  # Makes the plot square
set.seed(101)
# Density plot of TotalSleepTime
ggplot(dataset, aes(x = TotalSleepTime)) +
geom_density(fill = "lightblue") +
ggtitle("Density Plot of Sleep Hours")
set.seed(101)
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter plot of Term GPA vs Sleep Hours")
set.seed(101)
ggplot(dataset, aes(x = TotalSleepTime, y = cum_gpa)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter plot of Cumulative GPA vs Sleep Hours")
set.seed(101)
ggplot(dataset, aes(x = term_gpa)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black") +
ggtitle("Distribution of Term GPA")
ggplot(dataset, aes(x = cum_gpa)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black") +
ggtitle("Distribution of Cummulative GPA")
ggplot(dataset, aes(x = cum_gpa, y = term_gpa )) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter plot of Cummulative GPA vs Term GPA")
set.seed(101)
# Boxplot of term_gpa by Race
dataset$demo_race[is.na(dataset$demo_race)] <- 2 # as observed earlier, there was 1 NA value so we update it for inclusivity
ggplot(dataset, aes(x = factor(demo_race), y = term_gpa, fill = factor(demo_race))) +
geom_boxplot() +
labs(title = "BoxPlot of Term GPA by Race",
x = "Race (0 = Underrepresented, 1 = Non-Underrepresented, 2 = Other)",
y = "Term GPA") +
scale_fill_discrete(name = "Race")
ggplot(dataset , aes(x = term_gpa)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black") +
facet_wrap(~demo_race, scale = "free") +
theme_minimal() +
labs(title = "Distribution of Term GPA as per Race", x = "Term GPA", y = "Count")
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
facet_wrap(~demo_race, scale = "free_x") +
labs(title = "TotalSleepTime vs Term GPA with Race",
x = "Total Sleep Time",
y = "Term GPA")
dataset$gpa_range <- cut(dataset$term_gpa, breaks = c(-Inf, 2, 3, 4), labels = c("<2", "2-3", "3-4"))
ggplot(dataset, aes(x = Zterm_units_ZofZ, y = TotalSleepTime)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
facet_wrap(~gpa_range, scale = "free_x") +
labs(title = "Standardized Workload vs Total Sleep Time",
x = "Standardized Workload (Zterm_units_ZofZ)",
y = "Total Sleep Time")
set.seed(101)
ggplot(dataset, aes(x = Zterm_units_ZofZ, y = term_gpa )) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter plot of Work Load vs Term GPA")
set.seed(101)
# Boxplot of term_gpa by Gender
dataset$demo_gender[is.na(dataset$demo_gender)] <- 2 # as observed earlier, there are 3 NA value so we update it for inclusivity
ggplot(dataset, aes(x = factor(demo_gender), y = term_gpa, fill = factor(demo_gender))) +
geom_boxplot() +
labs(title = "BoxPlot of Term GPA by Gender",
x = "Gender (0 = Male, 1 = Female, 2 = Other)",
y = "Term GPA") +
scale_fill_discrete(name = "Gender")
ggplot(dataset , aes(x = term_gpa)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black") +
facet_wrap(~demo_gender, scale = "free") +
theme_minimal() +
labs(title = "Distribution of Term GPA as per Gender", x = "Term GPA", y = "Count")
set.seed(101)
# Faceted scatter plot of term_gpa vs SleepHours by Gender
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_point() +
facet_wrap(~demo_gender, ,scales='free') +
ggtitle("Faceted Scatter Plot of Term GPA vs Sleep Hours by Gender")
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_boxplot() +
facet_wrap(~demo_firstgen, scale = "free_x") +
labs(title = "Term GPA by First-Generation Status", x = "First-Generation Status", y = "Term GPA")
ggplot(dataset, aes(x = midpoint_sleep, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
facet_wrap(~study, scale = "free") +
labs(title = "Midpoint of Sleep vs Term GPA as per Study",
x = "Midpoint of Sleep in minutes after 11 pm ",
y = "Term GPA")
ggplot(dataset, aes(x = daytime_sleep, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~demo_gender, scale = "free_x") +
labs(title = "Daytime Sleep vs Term GPA", x = "Daytime Sleep (minutes)", y = "Term GPA")
set.seed(101)
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_boxplot() +
facet_wrap(~demo_firstgen, scale = "free_x") +
labs(title = "Term GPA by Total Sleep Time as per First-Generation Status", x = "Total Sleep Time", y = "Term GPA")
set.seed(101)
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_boxplot() +
facet_wrap(~demo_firstgen, scale = "free") +
labs(title = "Term GPA by Total Sleep Time as per First-Generation Status", x = "Total Sleep Time", y = "Term GPA")
set.seed(101)
ggplot(dataset, aes(x = TotalSleepTime, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~daytime_sleep, scale = "free_x") +
labs(title = "Total Sleep Time vs Term GPA by Daytime Sleep", x = "Total Sleep Time", y = "Term GPA")
set.seed(101)
ggplot(dataset, aes(x = daytime_sleep, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~study, scale = "free_x") +
labs(title = "Daytime Sleep vs Term GPA", x = "Daytime Sleep (minutes)", y = "Term GPA")
set.seed(101)
ggplot(dataset, aes(x = daytime_sleep, y = term_gpa)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~study, scale = "free_x") +
labs(title = "Daytime Sleep vs Term GPA by Study", x = "Daytime Sleep (minutes)", y = "Term GPA")
df <- read.csv("http://www.stat.cmu.edu/~pfreeman/heart_disease.csv",stringsAsFactors=TRUE)
df <- df[,-10]
w  <- which(df$Cost > 0)
df <- df[w,]
df$Cost          <- log(df$Cost)
df$Complications <- factor(df$Complications)
df$Drugs         <- factor(df$Drugs)
summary(df)
df <- read.csv("http://www.stat.cmu.edu/~pfreeman/heart_disease.csv",stringsAsFactors=TRUE)
#df <- df[,-10]
w  <- which(df$Cost > 0)
df <- df[w,]
df$Cost          <- log(df$Cost)
df$Complications <- factor(df$Complications)
df$Drugs         <- factor(df$Drugs)
summary(df)
df <- read.csv("http://www.stat.cmu.edu/~pfreeman/heart_disease.csv",stringsAsFactors=TRUE)
df <- df[,-10]
w  <- which(df$Cost > 0)
df <- df[w,]
df$Cost          <- log(df$Cost)
df$Complications <- factor(df$Complications)
df$Drugs         <- factor(df$Drugs)
summary(df)
# FILL ME IN
set.seed(101)
s <- sample(nrow(df),round(0.7*nrow(df)))
df <- read.csv("http://www.stat.cmu.edu/~pfreeman/heart_disease.csv",stringsAsFactors=TRUE)
df <- df[,-10]
w  <- which(df$Cost > 0)
df <- df[w,]
df$Cost          <- log(df$Cost)
df$Complications <- factor(df$Complications)
df$Drugs         <- factor(df$Drugs)
summary(df)
# FILL ME IN
set.seed(101)
s <- sample(nrow(df),round(0.7*nrow(df)))
df.train <- df[s,] # training set
df.test <- df[-s,] # test set
# FILL ME IN
### Linear Regression Model:
lm.out <- lm(Cost~.,data=df.train)
summary(lm.out)
Cost.pred <- predict(lm.out,newdata=df.test)
suppressMessages(library(tidyverse))
# FILL ME IN
# Generate predictions for the test set
Cost.pred <- predict(lm.out, newdata = df.test)
# Create a data frame for residuals
df.plot <- data.frame("x" = df.test$Cost - Cost.pred)
# Load ggplot2 if it's not already loaded
library(ggplot2)
# Create the histogram
ggplot(df.plot, aes(x = x)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Residuals", x = "Residuals (Y_i - Ŷ_i)", y = "Frequency") +
theme_minimal()
# FILL ME IN
shapiro.test(df.plot$x)
ggplot(df.plot, aes(x = Cost.pred, y = df.test$Cost - Cost.pred)) +
geom_point(color = "blue", alpha = 0.7) +
labs(title = "Residuals vs Predicted Values",
x = "Predicted Log-Cost",
y = "Residuals (Observed - Predicted)") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
theme_minimal()
df.plot <- data.frame("x"=Cost.pred,"y"=df.test$Cost-Cost.pred)
ggplot(df.plot, aes(x = x, y = y)) +
geom_point() +
labs(x = "Predicted Values", y = "Residuals") +
ggtitle("Plot of Residuals vs. Predicted Values") +
theme_minimal()
suppressMessages(library(car))
# FILL ME IN
bp_test <- ncvTest(lm.out)
bp_test
# Data frame for plotting observed vs predicted values
df.plot <- data.frame("x" = df.test$Cost, "y" = Cost.pred)
# Load ggplot2 if it's not already loaded
library(ggplot2)
# Create the plot
ggplot(df.plot, aes(x = x, y = y)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatter plot of observed vs predicted
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +  # Diagonal line
xlim(min(df.plot$x), max(df.plot$x)) +     # Set limits for x-axis
ylim(min(df.plot$x), max(df.plot$x)) +     # Set limits for y-axis (same as x-axis)
labs(title = "Predicted Log-Cost vs Observed Log-Cost",
x = "Observed Log-Cost",
y = "Predicted Log-Cost") +
theme_minimal()
ggplot(df.plot, aes(x = df.test$Cost, y = Cost.pred)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatter plot of observed vs predicted
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +  # Diagonal line
labs(title = "Predicted vs Observed Log-Cost",
x = "Observed Log-Cost",
y = "Predicted Log-Cost") +
xlim(min(df.plot$x), max(df.plot$x)) +  # Set x-axis limits to match
ylim(min(df.plot$x), max(df.plot$x)) +  # Set y-axis limits to match
theme_minimal()
library(ggplot2)
# Create the data frame for plotting
df.plot <- data.frame("x" = df.test$Cost, "y" = Cost.pred)
# Determine common limits for x and y axes based on the data range
common_limit <- range(c(df.plot$x, df.plot$y))
# Create the plot
ggplot(df.plot, aes(x = x, y = y)) +
geom_point(alpha = 0.5) +  # Add points with some transparency
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +  # Diagonal line
xlim(common_limit) + ylim(common_limit) +  # Set limits
labs(x = "Observed Log-Cost", y = "Predicted Log-Cost", title = "Diagnostic Plot: Observed vs. Predicted Log-Cost") +
theme_minimal()
# FILL ME IN
ggplot(df.plot, aes(x = df.test$Cost, y = Cost.pred)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatter plot of observed vs predicted
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +  # Diagonal line
labs(title = "Predicted vs Observed Log-Cost",
x = "Observed Log-Cost",
y = "Predicted Log-Cost") +
xlim(min(df.plot$x), max(df.plot$x)) +  # Set x-axis limits to match
ylim(min(df.plot$x), max(df.plot$x)) +  # Set y-axis limits to match
theme_minimal()
# Data frame for plotting observed vs predicted values
df.plot <- data.frame("x" = df.test$Cost, "y" = Cost.pred)
# Load ggplot2 if it's not already loaded
library(ggplot2)
# Create the plot
ggplot(df.plot, aes(x = x, y = y)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatter plot of observed vs predicted
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +  # Diagonal line
xlim(min(df.plot$x), max(df.plot$x)) +     # Set limits for x-axis
ylim(min(df.plot$x), max(df.plot$x)) +     # Set limits for y-axis (same as x-axis)
labs(title = "Predicted Log-Cost vs Observed Log-Cost",
x = "Observed Log-Cost",
y = "Predicted Log-Cost") +
theme_minimal()
library(ggplot2)
# Create the data frame for plotting
df.plot <- data.frame("x" = df.test$Cost, "y" = Cost.pred)
# Determine common limits for x and y axes based on the data range
common_limit <- range(c(df.plot$x, df.plot$y))
# Create the plot
ggplot(df.plot, aes(x = x, y = y)) +
geom_point(alpha = 0.5) +  # Add points with some transparency
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +  # Diagonal line
xlim(common_limit) + ylim(common_limit) +  # Set limits
labs(x = "Observed Log-Cost", y = "Predicted Log-Cost", title = "Diagnostic Plot: Observed vs. Predicted Log-Cost") +
theme_minimal()
df <- read.csv("http://www.stat.cmu.edu/~pfreeman/heart_disease.csv",stringsAsFactors=TRUE)
df <- df[,-10]
w  <- which(df$Cost > 0)
df <- df[w,]
df$Cost          <- log(df$Cost)
df$Complications <- factor(df$Complications)
df$Drugs         <- factor(df$Drugs)
summary(df)
# FILL ME IN
set.seed(101)
s <- sample(nrow(df),round(0.7*nrow(df)))
df.train <- df[s,] # training set
df.test <- df[-s,] # test set
# FILL ME IN
# Multiple Linear Regression Model:
lm.out <- lm(Cost~.,data=df.train)
summary(lm.out)
Cost.pred <- predict(lm.out,newdata=df.test)
suppressMessages(library(tidyverse))
# FILL ME IN
# Generate predictions for the test set
Cost.pred <- predict(lm.out, newdata = df.test)
# Create a data frame for residuals
df.plot <- data.frame("x" = df.test$Cost - Cost.pred)
# Load ggplot2 if it's not already loaded
library(ggplot2)
# Create the histogram
ggplot(df.plot, aes(x = x)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Residuals", x = "Residuals (Y_i - Ŷ_i)", y = "Frequency") +
theme_minimal()
# FILL ME IN
shapiro.test(df.plot$x)
# FILL ME IN
df.plot <- data.frame("x"=Cost.pred,"y"=df.test$Cost-Cost.pred)
ggplot(df.plot, aes(x = x, y = y)) +
geom_point() +
labs(x = "Predicted Values", y = "Residuals") +
ggtitle("Plot of Residuals vs. Predicted Values") +
theme_minimal()
suppressMessages(library(car))
# FILL ME IN
bp_test <- ncvTest(lm.out)
bp_test
# FILL ME IN
ggplot(df.plot, aes(x = df.test$Cost, y = Cost.pred)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatter plot of observed vs predicted
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +  # Diagonal line
labs(title = "Predicted vs Observed Log-Cost",
x = "Observed Log-Cost",
y = "Predicted Log-Cost") +
xlim(min(df.plot$x), max(df.plot$x)) +  # Set x-axis limits to match
ylim(min(df.plot$x), max(df.plot$x)) +  # Set y-axis limits to match
theme_minimal()
# Data frame for plotting observed vs predicted values
df.plot <- data.frame("x" = df.test$Cost, "y" = Cost.pred)
# Load ggplot2 if it's not already loaded
library(ggplot2)
# Create the plot
ggplot(df.plot, aes(x = x, y = y)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatter plot of observed vs predicted
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +  # Diagonal line
xlim(min(df.plot$x), max(df.plot$x)) +     # Set limits for x-axis
ylim(min(df.plot$x), max(df.plot$x)) +     # Set limits for y-axis (same as x-axis)
labs(title = "Predicted Log-Cost vs Observed Log-Cost",
x = "Observed Log-Cost",
y = "Predicted Log-Cost") +
theme_minimal()
library(ggplot2)
# Create the data frame for plotting
df.plot <- data.frame("x" = df.test$Cost, "y" = Cost.pred)
# Determine common limits for x and y axes based on the data range
common_limit <- range(c(df.plot$x, df.plot$y))
# Create the plot
ggplot(df.plot, aes(x = x, y = y)) +
geom_point(alpha = 0.5) +  # Add points with some transparency
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +  # Diagonal line
xlim(common_limit) + ylim(common_limit) +  # Set limits
labs(x = "Observed Log-Cost", y = "Predicted Log-Cost", title = "Diagnostic Plot: Observed vs. Predicted Log-Cost") +
theme_minimal()
# FILL ME IN
vif_values <- vif(lm.out)
vif_values
# FILL ME IN
mse <- mean((df.test$Cost - Cost.pred)^2)
mse
df <- read.csv("http://www.stat.cmu.edu/~pfreeman/heart_disease.csv",stringsAsFactors=TRUE)
df <- df[,-10]
w  <- which(df$Cost > 0)
df <- df[w,]
df$Cost          <- log(df$Cost)
df$Complications <- factor(df$Complications)
df$Drugs         <- factor(df$Drugs)
summary(df)
# FILL ME IN
set.seed(101)
s <- sample(nrow(df),round(0.7*nrow(df)))
df.train <- df[s,] # training set
df.test <- df[-s,] # test set
# FILL ME IN
# Multiple Linear Regression Model:
lm.out <- lm(Cost~.,data=df.train)
summary(lm.out)
Cost.pred <- predict(lm.out,newdata=df.test)
suppressMessages(library(tidyverse))
# FILL ME IN
# Generate predictions for the test set
Cost.pred <- predict(lm.out, newdata = df.test)
# Create a data frame for residuals
df.plot <- data.frame("x" = df.test$Cost - Cost.pred)
# Load ggplot2 if it's not already loaded
library(ggplot2)
# Create the histogram
ggplot(df.plot, aes(x = x)) +
geom_histogram(binwidth = 0.1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Residuals", x = "Residuals (Y_i - Ŷ_i)", y = "Frequency") +
theme_minimal()
# FILL ME IN
shapiro.test(df.plot$x)
# FILL ME IN
df.plot <- data.frame("x"=Cost.pred,"y"=df.test$Cost-Cost.pred)
ggplot(df.plot, aes(x = x, y = y)) +
geom_point() +
labs(x = "Predicted Values", y = "Residuals") +
ggtitle("Plot of Residuals vs. Predicted Values") +
theme_minimal()
suppressMessages(library(car))
# FILL ME IN
bp_test <- ncvTest(lm.out)
bp_test
# FILL ME IN
df.plot <- data.frame("x" = df.test$Cost, "y" = Cost.pred)
library(ggplot2)
ggplot(df.plot, aes(x = x, y = y)) +
geom_point(color = "blue", alpha = 0.7) +  # Scatter plot of observed vs predicted
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +  # Diagonal line
xlim(min(df.plot$x), max(df.plot$x)) +     # Set limits for x-axis
ylim(min(df.plot$x), max(df.plot$x)) +     # Set limits for y-axis (same as x-axis)
labs(title = "Predicted Log-Cost vs Observed Log-Cost",
x = "Observed Log-Cost",
y = "Predicted Log-Cost") +
theme_minimal()
# FILL ME IN
vif_values <- vif(lm.out)
vif_values
# FILL ME IN
mse <- mean((df.test$Cost - Cost.pred)^2)
mse
